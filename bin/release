#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import subprocess
import getpass
import requests
from collections import namedtuple

Result = namedtuple("Result", ['return_code', 'text'])

def success(s): print("😎  " + s)
def p(s): print("🤖  " + s)
def err(s): print("🤢  " + s)

def bash(command):
	result = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
	result.poll()
	result.wait()
	return_code = result.returncode
	text = result.communicate()[0].split('\n')
	return Result(return_code, text)

def check_result(command_string, success_message, failure_message):
	result = bash(command_string)
	if result.return_code == 0:
		success(success_message)
		return result
	else:
		err(failure_message)
		for line in result.text:
			print(line)
		sys.exit(1)


p("Running tests")
check_result("make test", "Test run succeeded", "Test run failure!")

p("Checking that version numbers match throughout repo")
check_version = check_result(
	"make check-version",
	"Version numbers matched",
	"Version numbers didn't match!"
)
version = check_version.text[1]

p("Checking that git tag for version {} exists".format(version))
check_result(
	"git rev-parse {}".format(version),
	"Found git tag for version {}".format(version),
	"Didn't find a git tag for version {}".format(version)
)

# Make sure git tag has been pushed to public
p("Checking that git tag {} is pushed to public".format(version))
bash("git fetch public")
contains = bash("git branch -r --contains {}".format(version))
for branch in contains.text:
	if branch.strip() == "public/master":
		success("Found git tag {} in the public remote".format(version))
		break
else:
	err("Couldn't find git tag {} in the public remote".format(version))


p("Checking for local MAX-Specs repo in ~/.cocoapods")
if not os.path.isdir(os.path.expanduser("~") + "/.cocoapods/repos/MAX-Specs"):
	p("No local MAX-Specs repo found, cloning now")
	bash("pod repo add MAX-Specs git@github.com:MAXAds/Specs.git")
else:
	p("Found it, skipping pod repo add")

p("Pushing new podspec version for {}".format(version))
check_result(
	"pod repo push MAX-Specs MAX.podspec --allow-warnings --swift-version=4.0",
	"Successfully pushed new podspec version",
	"Failed trying to push new podspec version"
)

try:
	slack_url = open(os.path.expanduser("~") + "/.slack_url", 'r').read()
	user = getpass.getuser()
	data = {"text": "Mmm... yeah... a new version of the MAX iOS SDK ({}) was just released by {}".format(version, user)}
	p("Posting release notification to slack")
	requests.post(slack_url, json=data)
except IOError:
	p("Couldn't find slack url in ~/.slack_url, skipping slack notification")

p("Please remember to update the docs.maxads.io changelog for iOS with the following for version {}:".format(version))
last_tag, _ = sorted(bash("git tag").text)[-2:]
print("#### {}".format(version))
for message in bash("git log {}..HEAD --format=%b".format(last_tag)).text:
	if len(message) > 0:
		print("* " + message)
